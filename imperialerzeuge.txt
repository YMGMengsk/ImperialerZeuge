import discord
from discord.ext import commands
import aiohttp
from googleapiclient.discovery import build
import requests
import asyncio
import datetime

#intents
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True
intents.members = True
client = discord.Client(intents=intents)

bot = commands.Bot(command_prefix= '!', intents=intents)
#intents

#Twitch IDs
Twitchclient_ID = 'oh6bxa5xpcl8tapg0xbt71haslxslw'
Twitchclientsecret_ID = 'pxx3849qgz5o0dbju38oj27w5o1y16'
#Twitch IDs

#Twitch Channel
TwitchStreamername = 'arkturus_mengsk'
#Twitch Channel

#Youtube Api
YoutubeAPIKey = 'AIzaSyAKVlhdcHUY1AvxwO46ZtFfdjyhpkiQbK8'
YoutubeChannelIDS = ['UCwBBabP0N_3WiPpvAqAV4pg']
youtube = build('youtube', 'v3', developerKey=YoutubeAPIKey)
#Youtube Api

#Channel IDs
Voicecreate_ID = 1248670963365580830
Voicecategorie_ID = 1248632935767216271
Twitchlivechannel_ID = 1248680436390035626
YoutubeVideochannel_ID = 1249960514403172404
#Channel IDs

latest_videos= {}
channel_names= {}

#Youtube Channel name getter
def get_channel_names():
    for YoutubeChannelids in YoutubeChannelIDS:
        try:
            request = youtube.channels().list(
                part='snippet',
                id=YoutubeChannelids
            )
            response = request.execute()
            if response['items']:
                channel_name =response['items'][0]['snippet']['title']
                channel_names[YoutubeChannelids] = channel_name
        
        except Exception as e:
            print(f"Error fechting channel name: {e}")

get_channel_names()
#Youtube Channel name getter

#Login check
@bot.event
async def on_ready():
    print(f'Bot ist eingeloggt als {bot.user}')
#Login check



#Test Command
@bot.command(name='hello')
async def hello(ctx):
    await ctx.send('Hallo')

@bot.command(name='Hello')
async def hello(ctx):
    await ctx.send('Hallo')
#Test Command


#Automatic Voice Channel creation
@bot.event
async def on_voice_state_update(member, before, after):
    if after.channel and after.channel.id == Voicecreate_ID:
        guild = member.guild
        category = guild.get_channel(Voicecategorie_ID)

        #erstell ein neuen Sprach Channel
        new_channel = await guild.create_voice_channel(name= f'{member.display_name}´s channel', category=category)

        #User moven
        await member.move_to(new_channel)

        #automatisches löschen
        await discord.utils.sleep_until(discord.utils.utcnow() + datetime.timedelta(minutes=1))
        await new_channel.delete()
#Automatic Voice Channel creation

#Twitch Live notifacion
async def get_twitch_access_token():
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        'client_id': Twitchclient_ID,
        'client_secret': Twitchclientsecret_ID,
        'grant_type': 'client_credentials'
    }
    response = requests.post(url, params=params)
    acces_token = response.json().get('access_token')
    return acces_token

async def is_stream_live(channel_name, access_token):
    url = f"https://api.twitch.tv/helix/streams?user_login={channel_name}"
    headers = {
        'Client-ID': Twitchclient_ID,
        'Authorization': f'Bearer {access_token}'
    }

    response = requests.get(url, headers=headers)
    data = response.json().get('data')
    return bool(data)

async def check_stream():
    await client.wait_until_ready()
    channel = client.get_channel(Twitchlivechannel_ID)
    access_token = await get_twitch_access_token()
    was_live = False

    while not client.is_closed():
        is_live = await is_stream_live(TwitchStreamername, access_token)

        if is_live and not was_live:
            await channel.send(f"{TwitchStreamername} ist jetzt live auf Twitch! Schaut mal rein")
            was_live = True
        elif not is_live:
            was_live = False
        
        await asyncio.sleep(60)

@client.event
async def on_ready():
    print(f'Wir sind eingeloggt als {client.user}')
    client.loop.create_task(fetch_latest_videos())

    client.loop.create_task(check_stream())
#Twitch Live notifaction



#Youtube new Video Notification

async def fetch_latest_videos():
    while True:
        for YoutubeChannelids in YoutubeChannelIDS:
            try:
                request = youtube.search().list(
                    part='snippet',
                    channelId=YoutubeChannelids,
                    maxResults=1,
                    order='date'
                )
                response = request.execute()
                print(response)

                if response['items']:
                    video_id = response['items'][0]['id']['videoId']
                    video_title = response['items'][0]['snippet']['title']
                    video_url = f'https://www.youtube.com/watch?v={video_id}'
                    channel_name = channel_names[YoutubeChannelids]

                    if YoutubeChannelIDS not in latest_videos or latest_videos[YoutubeChannelIDS] != video_id:
                        latest_videos[YoutubeChannelIDS] =video_id
                        channel = client.get_channel(YoutubeChannelIDS)
                        await channel.send(f'Neues Video von {channel_name}: {video_title} \nn{video_url}')
            except Exception as e:
                print(f"{e}")
                

        await asyncio.sleep(600)


#Youtube new Video Notification

#youtube Test command
@bot.command()
async def youtubee(ctx):
    for YoutubeChannelids in YoutubeChannelIDS:
        try:
            request = youtube.search().list(
                part='snippet',
                channelId=YoutubeChannelids,
                maxResults=1,
                order='date'
            )
            response = request.execute()

            if response['items']:
                video_id = response['items'][0]['id']['videoId']
                video_title = response['items'][0]['snippet']['title']
                video_url = f'https://www.youtube.com/watch?v={video_id}'
                channel_name = channel_names[YoutubeChannelids]

                await ctx.send(f'Neuste Video von {channel_name}: {video_title} \n{video_url}')
        except Exception as e:
            await ctx.send(f"Fehler beim fetchen {YoutubeChannelids}: {e}")
#youtube Test command




bot.run('MTI0ODYzNTA2MzMyMzU5MDY4Nw.GplNTh.XdrvAzfCQb8PNl2no5M_zQ15bbp_Gz6dY9su9c')